# ===========================================================
# OWASP SAMM Activity Description
# ===========================================================
#Link to the stream that this activity belongs to
stream:
  27a14a265c864eb790781cd1e2bf843b
  
#Link to the practice level that this activity belongs to
level:
  3d035b6df77f4ee69577c9b4c9d64891
  
#Unique identifier (GUID) used to refer to this activity. 
#Please generate another identifier for your specific activity.
id:
  81ef5625583646bf8bc3fad53e4eff55

#The title of this activity
title:
  Perform fuzz testing during security testing using automated tools.

#Describe the benefit that is achieved by implementing this activity
benefit: 
  Detect security bugs that would have often been missed by human eyes.

#A one sentence description of the activity
shortDescription:
  Perform security fuzzing testing

#A multi-paragraph description of the activity
longDescription: 
  During security tests, cover at least a minimum fuzzing for vulnerabilities against the main input parameters of the application.

  Perform fuzzing, sending massive amounts of random data, to the test subject in an attempt to make it crash. Fuzz testing or Fuzzing is a Black Box software testing technique, which consists of finding implementation bugs using automated malformed or semi-malformed data injection.

  The great advantage of fuzz testing is that the test design is extremely simple, and free of preconceptions about system behavior. The random approach allows this method to find bugs that human eyes would often miss. Plus, when the tested system is totally closed (say, a SIP phone), fuzzing is one of the only means of reviewing its quality.

  Consider the use of automated fuzzing tools and build an application specific dictionary of fuzzing payloads like fault injection patterns, predictable resource locations, and regexes for matching server responses (you can start with open source dictionaries like FuzzDB*)

#The output of this particular activity
results:
  - result1
  - result2

#The different metrics that can be used to measure the success of the activity
metrics:
  - metric1
  - metric2

#A description of the costs required to implement the activity  
costs:
  Difficult to say, but let's give it a try.
  
#The (standard) roles involved in the implementation of this activity
personnel:
  - Architect
  - Developer
  - Tester

#Internal notes that might help the author
notes: 
  My first thought goes here.
  
  My second thought goes here.

#References to other activities that are prerequesites to implement this one.
dependencies: 
  - 41069df2385749b190f46e8a776e6339
  - 41069df2385749b190f46e8a776e6339
  - 41069df2385749b190f46e8a776e6339