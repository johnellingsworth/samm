# ===========================================================
# OWASP SAMM Activity Description
# ===========================================================
#Link to the stream that this activity belongs to
stream:
  17c90203f8354c3594eea22759e375a9
  
#Link to the practice level that this activity belongs to
level:
  9d1e469966124c0fa80d1bc2fc223a0a
  
#Unique identifier (GUID) used to refer to this activity. 
#Please generate another identifier for your specific activity.
id:
  4f6a06796d0840debcc775ea1af65679

#The title of this activity
title:
  Leverage automated security tests in the software delivery pipeline to detect security issues early and provide visibility and awareness in the organization. 

#Describe the benefit that is achieved by implementing this activity
benefit: 
  Allows to detect software vulnerabilities at the speed of build and deployment by integrating test tools as part of this process.

#A one sentence description of the activity
shortDescription:
  Integrate automated security testing into the build and deploy process

#A multi-paragraph description of the activity
longDescription: 
  Projects within the organization routinely run automated security tests and review results during development. Configure security testing tools to automatically run as part of the build and deploy process to make this scalable with low overhead. Inspect findings as they occur.

  Conducting security tests as early as the requirements or design phases can be beneficial. While traditionally used for functional test cases, this type of test-driven development approach involves identifying and running relevant security test cases early in the development cycle, usually during design. With the automatic execution of security test cases, projects enter the implementation phase with a number of failing tests for the non-existent functionality. Implementation is complete when all the tests pass. This provides a clear, upfront goal for developers early in the development cycle, lowering risk of release delays due to security concerns or forced acceptance of risk to meet project deadlines.

  For each project release, present results from automated and manual security tests to management and business stakeholders for review. If there are unaddressed findings that remain as accepted risks for the release, stakeholders and development managers work together to establish a concrete timeframe for addressing them. Review and improve the quality of the security tests as part of each release.

  Consider and implement security test correlation tools to automate the matching and merging of test results from dynamic, static, and interactive application scanners into one central dashboard, providing direct input towards Defect Management. Spread the knowledge of the created security tests and the results across the development team to improve security knowledge and awareness inside the organisation.

#The output of this particular activity
results:
  - result1
  - result2

#The different metrics that can be used to measure the success of the activity
metrics:
  - metric1
  - metric2

#A description of the costs required to implement the activity  
costs:
  Difficult to say, but let's give it a try.
  
#The (standard) roles involved in the implementation of this activity
personnel:
  - Architect
  - Developer
  - Tester

#Internal notes that might help the author
notes: 
  My first thought goes here.
  
  My second thought goes here.

#References to other activities that are prerequesites to implement this one.
dependencies: 
  - 41069df2385749b190f46e8a776e6339
  - 41069df2385749b190f46e8a776e6339
  - 41069df2385749b190f46e8a776e6339